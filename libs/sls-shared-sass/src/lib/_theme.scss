@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:string';
@use '@angular/material';
@use '@angular/material/theming';

@use 'theme/all-theme' as lib-theme;
@use 'theme/all-color' as lib-color;
@use 'theme/all-typography' as lib-typography;

@use 'theme/palettes-grades-fonts' as pgNf;
@use 'theme/mechanics/reset' as reset;

//$light-primary-palette: material.define-palette(theming.$amber-palette, A200, A100, A400, 500);
//$light-accent-palette: material.define-palette(theming.$gray-palette, A200, A100, A400, 500);
//$dark-primary-palette: material.define-palette(theming.$brown-palette, A200, A100, A400, 500);
//$dark-accent-palette: material.define-palette(theming.$amber-palette, A200, A100, A400, 500);
//$warn-palette: material.define-palette(theming.$mat-red, A200, A100, A400, 500);
//$light-primary-palette: material.define-palette(theming.$mat-indigo, A200, A100, A400, 500);
//$light-accent-palette: material.define-palette(material.$red-palette, A200, A100, A400, 500);
//$dark-primary-palette: material.define-palette(pgNf.$gray-color-grades, A200, A100, A400, 900);
//$dark-accent-palette: material.define-palette(pgNf.$grey-palette, A200, A100, A400, 900);
$light-primary-palette: material.define-palette(pgNf.$gray-color-grades);
$light-accent-palette: material.define-palette(pgNf.$teal-color-grades);
$dark-primary-palette: material.define-palette(pgNf.$gray-color-grades);
$dark-accent-palette: material.define-palette(pgNf.$teal-color-grades);


$warn-palette: material.define-palette(theming.$mat-indigo, A200, A100, A400, 500);
$success-palette: material.define-palette(theming.$mat-gray, 700, 300, 900, 500);
$caution-palette: material.define-palette(theming.$mat-indigo, 400, 300, 900, 500);
$danger-palette: material.define-palette(theming.$mat-indigo, 400, 300, 900, 500);

//$light-theme: material.define-light-theme(
//        (color: (
//            primary: $light-primary-palette,
//            accent: $light-accent-palette,
//            warn: $warn-palette,
//            success: $success-palette,
//            caution: $caution-palette,
//            danger: $danger-palette,
//            is-dark: false,
//        ),
//            typography: pgNf.$font-config
//        ));
//
//$dark-theme: material.define-light-theme(
//        (color: (
//            primary: $dark-primary-palette,
//            accent: $dark-accent-palette,
//            warn: $warn-palette,
//            success: $success-palette,
//            caution: $caution-palette,
//            danger: $danger-palette,
//            is-dark: true,
//        ),
//            typography: pgNf.$font-config
//        ));


//$success-colors: material.define-palette(theming.$mat-green, 700, 300, 900, 500);
//$warning-colors: material.define-palette(theming.$mat-amber, 400, 300, 900, 500);
//$app-primary: material.define-palette(theming.$mat-grey, 700, 300, 900, 500);
//$app-accent: material.define-palette(theming.$mat-blue-grey, 400, 300, 900, 500);
//$app-warn: material.define-palette(theming.$mat-red, 500, 300, 900, 500);
//$primary: material.get-color-from-palette($app-primary, 700, 300);
//$accent: material.get-color-from-palette($app-accent, 700, 300);
//$warn: material.get-color-from-palette($app-warn, 700, 300);
//$light-primary-palette: material.define-palette(pgNf.$gray-color-grades);
//$light-accent-palette: material.define-palette(pgNf.$teal-color-grades);
$angular-primary: material.define-palette(pgNf.$gray-color-grades);
$angular-accent: material.define-palette(pgNf.$teal-color-grades);
$angular-warn: material.define-palette(pgNf.$mat-red);
//

//
//$primary: var(--ion-color-primary);
//$secondary: var(--ion-color-primary);
//
//$dark: var(--ion-color-dark);
//$light: var(--ion-color-light);
//$grey: var(--ion-color-dark-tint);
//$lightgrey: var(--ion-color-medium-shade);
//
///* alerts */
//$success: var(--ion-color-success);
//$info: var(--ion-color-secondary-tint);
//$danger: var(--ion-color-danger);
//$warning: var(--ion-color-warning);
//
//$caution: var(--ion-color-warning);
//$error: var(--ion-color-danger);
//
//$grid-breakpoints: (
//    xs: 0,
//    sm: 576px,
//    md: 768px,
//    lg: 992px,
//    xl: 1200px,
//);
//
//$grid-gutter-width: 0px;
//
//$angular-primary: material.define-palette(material.$cyan-palette, 500, 100, 900);
//$angular-accent: material.define-palette(material.$pink-palette, A200, A100, A400);
//$angular-warn: material.define-palette(material.$red-palette);
//
$font-family: Roboto, 'Helvetica Neue', sans-serif;
//
//$typography-level: material.define-typography-level(
//    $font-family: Roboto,
//    $font-weight: 400,
//    $font-size: 1rem,
//    $line-height: 1,
//    $letter-spacing: normal,
//);
//
$mobile-font-config: material.define-typography-config(
    $font-family: 'Roboto, \"Helvetica Neue\", sans-serif',
    $display-4: material.define-typography-level(76px, 90px, 300, $font-family, -0.05em),
    $display-3: material.define-typography-level(64px, 77px, 400, $font-family, -0.02em),
    $display-2: material.define-typography-level(56px, 67px, 400, $font-family, -0.005em),
    $display-1: material.define-typography-level(48px, 58px, 400, $font-family),
    $headline: material.define-typography-level(40px, 48px, 400, $font-family),
    $title: material.define-typography-level(36px, 43px, 500, $font-family),
    $subheading-2: material.define-typography-level(28px, 33px, 400, $font-family, 0.0094em),
    $subheading-1: material.define-typography-level(20px, 24px, 500, $font-family, 0.0067em),
    $body-2: material.define-typography-level(18px, 29px, 500, $font-family, 0.0156em),
    $body-1: material.define-typography-level(16px, 25px, 400, $font-family, 0.0156em),
    $button: material.define-typography-level(16px, 16px, 500, $font-family, 0.0781em),
    $caption: material.define-typography-level(14px, 22px, 400, $font-family, 0.0286em),
    $input: material.define-typography-level(inherit, 1.125, 400, $font-family, 1.5px)
);

$light-theme: material.define-light-theme(
        (color: (
            primary: $angular-primary,
            accent: $angular-accent,
            warn: $angular-warn,
        ),
            typography: pgNf.$font-config
        )
);

$dark-theme: material.define-dark-theme(
        (color: (
            primary: $angular-primary,
            accent: $angular-accent,
            warn: $angular-warn,
        ),
            typography: pgNf.$font-config
        )
);

/* order important, must be before actual usage below !!! */
@mixin apply-library-theme($theme) {
    @include reset.reset;

    @include lib-theme.all-theme($theme);

    $color-config: material.get-color-config($theme);
    $primary-palette: map.get($color-config, 'primary');
    $caption-color: material.get-color-from-palette($primary-palette, text);

    $color-config: material.get-color-config($theme);
    @if $color-config != null {
        @include apply-library-color($color-config);
    }
    $typography-config: material.get-typography-config($theme);
    @if $typography-config != null {
        @include apply-library-typography($typography-config);
    }

    @debug ('***SASS*** MAIN SASS-Library theming core components completed');
}

@mixin apply-library-color($config) {
    $primary-palette: map.get($config, 'primary');
    $caption-color: material.get-color-from-palette($primary-palette, text);
    @include lib-color.all-color($config);
}

@mixin apply-library-typography($config) {
    $typography-config: material.get-typography-config($config);
    @include lib-typography.all-typography($config);
}

//
//@include material.core();
//
//@include material.all-component-themes($light-theme);

/* theme, color, typography, density */
//@include lib-theme.all-theme($light-theme);
//@include apply-theme($light-theme);
//$color-config: material.get-color-config($light-theme);
//$typography-config: material.get-typography-config($light-theme);
//
//$is-dark-theme: map-get($color-config, is-dark);
//@debug (' is dark ===> ', $is-dark-theme);


//.darkMode {
//@include material.all-component-themes($dark-theme);
//@include lib-theme.all-theme($dark-theme);
//@include apply-theme($dark-theme);
//}

// This is how we define our setups
//@use './theming';
//@use './palette';
//
//// @deprecated Use `get-color-from-palette`.
//@function color($palette, $hue: default, $opacity: null) {
//    @return theming.get-color-from-palette($palette, $hue, $opacity);
//}
//
//// @deprecated Use `get-contrast-color-from-palette`.
//@function contrast($palette, $hue) {
//    @return theming.get-contrast-color-from-palette($palette, $hue);
//}
//
//// @deprecated Use `define-palette`.
//@function palette($base-palette, $default: 500, $lighter: 100, $darker: 700, $text: $default) {
//    @return theming.define-palette($base-palette, $default, $lighter, $darker, $text);
//}
//
//// @deprecated Use `define-light-theme`.
//@function dark-theme($primary, $accent: null, $warn: palette(palette.$red-palette)) {
//    @return theming.define-dark-theme($primary, $accent, $warn);
//}
//
//// @deprecated Use `define-light-theme`.
//@function light-theme($primary, $accent: null, $warn: palette(palette.$red-palette)) {
//    @return theming.define-light-theme($primary, $accent, $warn);
//}

