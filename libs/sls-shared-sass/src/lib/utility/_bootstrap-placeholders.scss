@use "sass:math";


$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
);

$spacers: (
    0: 0,
    1: getRem(40px),
    1-half: getRem(20px),
    2: getRem(30px),
    2-half: getRem(15px),
    3: getRem(20px),
    3-half: getRem(10px),
    4: getRem(5px), // this is here if we need to add some breathing room
    4-half: getRem(2.5px),
    5: 0, // here so we don't break bootstrap,
);



/*****************************************************
 * Margins and paddings
 *****************************************************/
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $prop, $abbrev in (margin: m, padding: p) {
      @each $size, $length in $spacers {
        %#{$abbrev}#{$infix}-#{$size} {
          #{$prop}: $length !important;
        }
        %#{$abbrev}t#{$infix}-#{$size},
        %#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-top: $length !important;
        }
        %#{$abbrev}r#{$infix}-#{$size},
        %#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-right: $length !important;
        }
        %#{$abbrev}b#{$infix}-#{$size},
        %#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-bottom: $length !important;
        }
        %#{$abbrev}l#{$infix}-#{$size},
        %#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-left: $length !important;
        }
      }
    }

    // Negative margins (e.g., where `%mb-n1` is negative version of `%mb-1`)
    @each $size, $length in $spacers {
      @if $size != 0 {
        %m#{$infix}-n#{$size} {
          margin: -$length !important;
        }
        %mt#{$infix}-n#{$size},
        %my#{$infix}-n#{$size} {
          margin-top: -$length !important;
        }
        %mr#{$infix}-n#{$size},
        %mx#{$infix}-n#{$size} {
          margin-right: -$length !important;
        }
        %mb#{$infix}-n#{$size},
        %my#{$infix}-n#{$size} {
          margin-bottom: -$length !important;
        }
        %ml#{$infix}-n#{$size},
        %mx#{$infix}-n#{$size} {
          margin-left: -$length !important;
        }
      }
    }

    // Some special margin utils
    %m#{$infix}-auto {
      margin: auto !important;
    }
    %mt#{$infix}-auto,
    %my#{$infix}-auto {
      margin-top: auto !important;
    }
    %mr#{$infix}-auto,
    %mx#{$infix}-auto {
      margin-right: auto !important;
    }
    %mb#{$infix}-auto,
    %my#{$infix}-auto {
      margin-bottom: auto !important;
    }
    %ml#{$infix}-auto,
    %mx#{$infix}-auto {
      margin-left: auto !important;
    }
  }
}
/*****************************************************
 * End Margins and paddings
 *****************************************************/

/*****************************************************
 * Grid
 *****************************************************/
// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.


@if $enable-grid-classes {
  %container {
    @include make-container();
  }
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but with 100% width for
// fluid, full width layouts.

@if $enable-grid-classes {
  %container-fluid {
    @include make-container();
  }
}

// Row
//
// Rows contain and clear the floats of your columns.

@if $enable-grid-classes {
  %row {
    @include make-row();
  }

  // Remove the negative margin from default .row, then the horizontal padding
  // from all immediate children columns (to prevent runaway style inheritance).
  %no-gutters {
    margin-right: 0;
    margin-left: 0;

    > %col,
    > [class*='col-'] {
      padding-right: 0;
      padding-left: 0;
    }
  }
}

// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
  $columns: $grid-columns;
  $gutter: $grid-gutter-width;
  $breakpoints: $grid-breakpoints;

  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: $gutter* 0.5;
    padding-left: $gutter* 0.5;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      %col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    %col#{$infix},
    %col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `%col-{bp}` classes for equal-width flexbox columns
      %col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      %col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: 100%; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        %col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      %order#{$infix}-first {
        order: -1;
      }

      %order#{$infix}-last {
        order: $columns + 1;
      }

      @for $i from 0 through $columns {
        %order#{$infix}-#{$i} {
          order: $i;
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not($infix == '' and $i == 0) {
          // Avoid emitting useless .offset-0
          %offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}
/*****************************************************
 * End Grid
 *****************************************************/

/*****************************************************
 * Flex
 *****************************************************/
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    %flex#{$infix}-row {
      flex-direction: row !important;
    }
    %flex#{$infix}-column {
      flex-direction: column !important;
    }
    %flex#{$infix}-row-reverse {
      flex-direction: row-reverse !important;
    }
    %flex#{$infix}-column-reverse {
      flex-direction: column-reverse !important;
    }

    %flex#{$infix}-wrap {
      flex-wrap: wrap !important;
    }
    %flex#{$infix}-nowrap {
      flex-wrap: nowrap !important;
    }
    %flex#{$infix}-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }
    %flex#{$infix}-fill {
      flex: 1 1 auto !important;
    }
    %flex#{$infix}-grow-0 {
      flex-grow: 0 !important;
    }
    %flex#{$infix}-grow-1 {
      flex-grow: 1 !important;
    }
    %flex#{$infix}-shrink-0 {
      flex-shrink: 0 !important;
    }
    %flex#{$infix}-shrink-1 {
      flex-shrink: 1 !important;
    }

    %justify-content#{$infix}-start {
      justify-content: flex-start !important;
    }
    %justify-content#{$infix}-end {
      justify-content: flex-end !important;
    }
    %justify-content#{$infix}-center {
      justify-content: center !important;
    }
    %justify-content#{$infix}-between {
      justify-content: space-between !important;
    }
    %justify-content#{$infix}-around {
      justify-content: space-around !important;
    }

    %align-items#{$infix}-start {
      align-items: flex-start !important;
    }
    %align-items#{$infix}-end {
      align-items: flex-end !important;
    }
    %align-items#{$infix}-center {
      align-items: center !important;
    }
    %align-items#{$infix}-baseline {
      align-items: baseline !important;
    }
    %align-items#{$infix}-stretch {
      align-items: stretch !important;
    }

    %align-content#{$infix}-start {
      align-content: flex-start !important;
    }
    %align-content#{$infix}-end {
      align-content: flex-end !important;
    }
    %align-content#{$infix}-center {
      align-content: center !important;
    }
    %align-content#{$infix}-between {
      align-content: space-between !important;
    }
    %align-content#{$infix}-around {
      align-content: space-around !important;
    }
    %align-content#{$infix}-stretch {
      align-content: stretch !important;
    }

    %align-self#{$infix}-auto {
      align-self: auto !important;
    }
    %align-self#{$infix}-start {
      align-self: flex-start !important;
    }
    %align-self#{$infix}-end {
      align-self: flex-end !important;
    }
    %align-self#{$infix}-center {
      align-self: center !important;
    }
    %align-self#{$infix}-baseline {
      align-self: baseline !important;
    }
    %align-self#{$infix}-stretch {
      align-self: stretch !important;
    }
  }
}

/*****************************************************
 * End Flex
 *****************************************************/

/*****************************************************
 * End Display
 *****************************************************/

/*****************************************************
 * Borders
 *****************************************************/
%border {
  border: $border-width solid $border-color !important;
}
%border-top {
  border-top: $border-width solid $border-color !important;
}
%border-right {
  border-right: $border-width solid $border-color !important;
}
%border-bottom {
  border-bottom: $border-width solid $border-color !important;
}
%border-left {
  border-left: $border-width solid $border-color !important;
}

%border-0 {
  border: 0 !important;
}
%border-top-0 {
  border-top: 0 !important;
}
%border-right-0 {
  border-right: 0 !important;
}
%border-bottom-0 {
  border-bottom: 0 !important;
}
%border-left-0 {
  border-left: 0 !important;
}

@each $color, $value in $theme-colors {
  %border-#{$color} {
    border-color: $value !important;
  }
}

%border-white {
  border-color: $white !important;
}

// Border-radius
%rounded-sm {
  border-radius: $border-radius-sm !important;
}

%rounded {
  border-radius: $border-radius !important;
}

%rounded-top {
  border-top-left-radius: $border-radius !important;
  border-top-right-radius: $border-radius !important;
}

%rounded-right {
  border-top-right-radius: $border-radius !important;
  border-bottom-right-radius: $border-radius !important;
}

%rounded-bottom {
  border-bottom-right-radius: $border-radius !important;
  border-bottom-left-radius: $border-radius !important;
}

%rounded-left {
  border-top-left-radius: $border-radius !important;
  border-bottom-left-radius: $border-radius !important;
}

%rounded-lg {
  border-radius: $border-radius-lg !important;
}

%rounded-circle {
  border-radius: 50% !important;
}

%rounded-0 {
  border-radius: 0 !important;
}
/*****************************************************
 * End Borders
 *****************************************************/
